<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.main.dao.EmployeeDAO">

<insert id="empLogRegister" parameterType='hashmap'>
		INSERT INTO employee_log (emp_no, emp_log_content, emp_log_condition)
		VALUES (#{emp_no}, #{emp_log_content}, #{emp_log_condition})
	</insert>

<select id="empLogList" resultType="com.gd.main.dto.EmployeeDTO" parameterType="String">
	<!-- 직원일지 호출 -->
	SELECT 
		e.emp_name,
		el.emp_log_date,
		el.emp_log_condition,
		el.emp_log_content,
		el.emp_no
	FROM 
		employee_log el 
	JOIN 
		employee e 
	ON 
		el.emp_no = e.emp_no 
	WHERE 
		e.emp_no = #{emp_no}
</select>
		
	<!--select distinct: 중복제거  -->
	<!--ON : JOIN 을 하기 전 필터링을 한다 (=ON 조건으로 필터링이 된 레코들간 JOIN이 이뤄진다)   -->
	<!--WHERE : JOIN 을 한 후 필터링을 한다 (=JOIN을 한 결과에서 WHERE 조건절로 필터링이 이뤄진다)  -->
<!-- <select id="empName" resultType="String">
		SELECT DISTINCT (e.emp_name) FROM employee e JOIN employee_log el ON e.emp_no = el.emp_no WHERE e.emp_no= #{param1}
</select> -->
<select id="empName" resultType="String">
		SELECT  (e.emp_name) FROM employee e  WHERE e.emp_no= #{param1}
</select>

	 <!--  직원정보 등록 -->
	<insert id="empRegister" parameterType="hashmap" >
		INSERT INTO employee(
			emp_id,
			emp_pw,
			emp_name,
			emp_phone,
			emp_position,
			emp_startDate,
		    emp_condition 
		) VALUES (	
			#{emp_id},
			#{emp_pw},
			#{emp_name},
			#{emp_phone},
			#{emp_position},
			#{emp_startDate},
			#{emp_condition}
		) 
	</insert>
 
	<!-- 직원목록 보기 -->
	<select id="empList" resultType="com.gd.main.dto.EmployeeDTO" parameterType="hashmap">
		SELECT emp_no, emp_name, emp_id, emp_phone, emp_condition,
				 emp_position, emp_startDate,emp_endDate FROM employee
		
	<where>
				<if test="empSearchCategory != null and empSearchCategory != '' and empSearchContent != null and empSearchContent != ''">
					<if test="empSearchCategory.equals('emp_name')">
						emp_name = #{empSearchContent}
					</if>
					<if test="empSearchCategory.equals('emp_phone')">
						emp_phone = #{empSearchContent}
					</if>
					<if test="empSearchCategory.equals('emp_position')">
						emp_position = #{empSearchContent}
					</if>
					<if test="empSearchCategory.equals('emp_condition')">
						emp_condition = #{empSearchContent}
					</if>
		</if>
	</where>	
	ORDER BY emp_no ASC limit #{cnt} OFFSET #{offset} 
	
	</select>
	
	<select id="allCount" resultType="com.gd.main.dto.EmployeeDTO" parameterType="hashmap">
		SELECT count(emp_no) FROM employee
	<!-- 	parameterType="hashmap" -->
	<where>
				<if test="empSearchCategory != null and empSearchCategory != '' and empSearchContent != null and empSearchContent != ''">
					<if test="empSearchCategory.equals('emp_name')">
						emp_name = #{empSearchContent}
					</if>
					<if test="empSearchCategory.equals('emp_phone')">
						emp_phone = #{empSearchContent}
					</if>
					<if test="empSearchCategory.equals('emp_position')">
						emp_position = #{empSearchContent}
					</if>
					<if test="empSearchCategory.equals('emp_condition')">
						emp_condition = #{empSearchContent}
					</if>
		</if>
	</where>	

	
	</select>
	 
	
	
	
	<select id="empOverlay" parameterType="String" resultType="String">
		SELECT emp_name
		FROM 
			employee
		WHERE 
			emp_name=#{emp_name}		
		<!-- SELECT emp_name FROM employee WHERE emp_name = #{chkName} -->
	</select>
	
	<select id = "selectEmpMyInfo" parameterType="com.gd.main.dto.EmployeeDTO" resultType="com.gd.main.dto.EmployeeDTO">
		SELECT emp_no, emp_pw, emp_name, emp_id, emp_phone, emp_condition, emp_position, emp_startDate, emp_endDate 
		FROM employee
		Where emp_no = #{emp_no};
	</select>

	<!-- 직원정보 수정하기 -->
	<update id="empUpdate" parameterType="hashmap">
 		UPDATE employee SET 
			emp_id = #{emp_id}
			,emp_pw= #{emp_pw}
			,emp_phone = #{emp_phone}
			,emp_position = #{emp_position}
			,emp_startDate =#{emp_startDate}
			,emp_condition =#{emp_condition}
		WHERE emp_no= #{emp_no} 
	</update>

</mapper>